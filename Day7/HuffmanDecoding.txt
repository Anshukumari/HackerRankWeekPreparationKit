import java.util.*;
 
abstract class Node implements Comparable<Node> {
    public  int frequency; // the frequency of this tree
    public  char data;
    public  Node left, right; 
    public Node(int freq) { 
      frequency = freq; 
    }
 
    // compares on the frequency
    public int compareTo(Node tree) {
        return frequency - tree.frequency;
    }
}
 
class HuffmanLeaf extends Node {
    
 
    public HuffmanLeaf(int freq, char val) {
        super(freq);
        data = val;
    }
}
 
class HuffmanNode extends Node {
    
    public HuffmanNode(Node l, Node r) {
        super(l.frequency + r.frequency);
        left = l;
        right = r;
    }

}


class Decoding {

/*  
	class Node
		public  int frequency; // the frequency of this tree
    	public  char data;
    	public  Node left, right;
    
*/ 

	void decode(String s, Node root) {
        String sInput = s;
        
        while (sInput.length() > 0) {
            sInput = traverseNode(sInput, root);
        }   
    }
    
String traverseNode(String s, Node node) {
        String inputVal = "";
        
        if (node.right == null && node.left == null) {
            System.out.print(node.data);
            inputVal = s;
        } 
        
        if (!s.isEmpty() && (node.right != null || node.left != null)) {
            if (s.charAt(0) == '1') inputVal = traverseNode(s.substring(1), node.right);
            if (s.charAt(0) == '0') inputVal = traverseNode(s.substring(1), node.left);
        }
        
        return inputVal;
    }

