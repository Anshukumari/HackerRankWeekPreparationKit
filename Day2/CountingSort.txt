using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'countingSort' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static List<int> countingSort(List<int> arr)
    {
      //  Dictionary<int,int> keyValues=new Dictionary<int,int>();
        List<int> frequency= new List<int>();
       //List<int> copiedArr = new List<int>();
       arr.Sort();
       //int first = arr[0];
       int last = arr[arr.Count-1];
       
        for(int i=0;i<100;i++)
        {
            bool isFound=false;
            int count=0;
            for(int j=0;j<arr.Count;j++)
            {
                if(i==arr[j])
                {
                    count++;
                    isFound=true;
                }
                else 
                {
                    isFound = false;
                }
                if(!isFound&&count>0)
                {
                    break;
                }
            }
            frequency.Add(count);
        }
        return frequency;
    }
}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine().Trim());

        List<int> arr = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(arrTemp => Convert.ToInt32(arrTemp)).ToList();

        List<int> result = Result.countingSort(arr);

        textWriter.WriteLine(String.Join(" ", result));

        textWriter.Flush();
        textWriter.Close();
    }
}
